import base64
import zlib
import time
import sys
import os

encoded_obf = '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'

max_attempts = 3

for attempt in range(max_attempts):
    secret = input("Masukkan kunci rahasia untuk dekripsi: ").encode('utf-8')
    if len(secret) < 8:
        print("Kunci terlalu pendek, minimal 8 karakter.")
        continue

    try:
        encoded = deobfuscate_string(encoded_obf)
        data = base64.b64decode(encoded)
        salt = data[:16]
        encrypted = data[16:]

        key = PBKDF2(secret, salt, dkLen=16, count=100000, hmac_hash_module=SHA256)

        decompressed = zlib.decompress(aes_decrypt(encrypted, key))
        exec(decompressed.decode('utf-8'))
        break
    except Exception:
        print("Kunci salah atau data rusak.")
        if attempt < max_attempts - 1:
            print("Coba lagi...")
            time.sleep(2)
        else:
            print("Percobaan habis. Program keluar.")
            sys.exit(1)
